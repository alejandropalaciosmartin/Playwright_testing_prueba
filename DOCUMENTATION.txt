🔵🟢---------------- DOCUMENTACION PLAYWRIGHT ----------------🔵🟢

- ¿Que necesitamos para utilizar Playwright?
    -> npm (node package manager) ❌
    -> Node (execution enviroment) ❌
    -> Visual Studio Code (IDE) ❌
    avascript (programming language) ❌
    -> Playwright (npm package) ❌
    -> Playwright Test for VSCode (plugin) ❌ugins de Playwright integrados que nos van a facilitar la vida a la hora de ejecutar tests.
    

Vamos a partir de que no tenemos nada de lo anterior, asi que vamos a ir poco a poco.

1️⃣ -> Primero necesitamos el 'npm'. Para ello nos vamos a la siguiente página (https://nodejs.org/en/download), descargamos node, y cabe recalcar que el instalador también lleva el gestor de paquetes Node.js (npm) dentro de él. Esto significa que no necesitas instalar el npm por separado. Así que nos quitamos dos pasos del tirón.

    -> npm (node package manager) ✔️
    -> Node (execution enviroment) ✔️

Para comprobar que se ha instalado bien tanto 'npm', como 'node', podemos abrir la consola de comandos y ejecutar 'node -v' y 'npm -v'.

2️⃣ -> Después, instalamos Visual Studio Code desde el siguiente enlace: https://code.visualstudio.com/download. Tenemos que instalar este IDE y no otro porque más adelante veremos que Visual Studio Code tiene plugins que nos hace mas facil el trabajar con Playwright-> 

    -> Visual Studio Code (IDE) ✔️

3️⃣ -> El lenguaje Javascript, es el que vamos a utilizar para generar los scripts para los test, asi que no hay que instalar nada, lo que si hay que instalar es el plugin de Playwright en Visual Studio Code. Para ello nos vamos, en VSCode, al apartado de Extensiones (Ctrl+Mayús+X) y en el buscador ponemos 'Playwright Test for VSCode' y lo instalamos'

    -> Javascript (programming language) ✔️
    -> Playwright Test for VSCode (plugin) ✔️

4️⃣ -> Por último, solo nos falta isntalar el paquete de Playwright con npm. Para ello creamos una carpeta en el lugar que deseemos (es la carpeta donde vamos a hacer nuestros scripts), abrimos la carpeta en VSCode (estará vacía obviamente) y abrimos una consola de comandos de la carpeta (Ctrl+Ñ). Escribimos el siguiente comando (( npm init playwright@latest )). Acontinuación, aparecera una serie de pasos:
    ▶️ Primero preguntará si queremos proceder a instalar Playwright, le decimos que si (poner una 'y')
    ▶️ En el siguiente paso nos pregunta que lenguaje queremos utilizar, en nuestro caso ponemos TypeScript
    ▶️ En los siguientes pasos: dejamos el nombre por defecto de 'tests', en el siguiente ponemos false y en el ultimo ponemos true (el ultimo paso es para instalar internamente todo los navegadores para no tener problemas al hacer testing)

    -> Playwright (npm package) ✔️


Ya tenemos todo configurado para poder comenzar!! 🥳👌




🔵🟢---------------- PRIMEROS TESTS CON PLAYWRIGHT ----------------🔵🟢

➡️ Por defecto nos creas una carpeta llamada tests, con un archivo con dos test muy sencillos (en esa carpeta es donde vamos a escribir nuestros tests) y otra carpeta llamada 'tests-examples' (está la vamos a borrar ya que no nos hace falta para nada). 

➡️ Entramos a la carpeta tests y vamos a ver que tiene el archivo 'example.specs.ts'. Como podemos ver tiene dos tests (cada vez que veamos la palabra "test" abriendo parentesis, quiere decir que ahí dentro hay un test). Para ejecutar los tests, abrimos la consola de comandos (Ctrl+Ñ) y ejecutamos el siguiente comando -> (( npx playwright test )) (Este comando ejecutara todos los tests que haya en la carpeta tests sin excepción alguna)

✔️ -> Si sale '6 passed' quiere decir que ha salido todo bien
❌ -> Al contrario, si sale algun error, este aparecera en rojo y habra que revisar el codigo

    En cualquiera de los dos casos anteriores, la consola de comandos nos sugiere que ejecutemos el siguiente comando: npx playwright show-report. Este comando es para ver paso a paso lo que ha hecho (en el caso de que tengamos algun error, nos viene de escandalo ya que podemos ver donde hemos fallado)




🔵🟢---------------- LOCALIZAR ELEMENTOS CON XPATH ---------------- 🔵🟢

-> CÓDIGO HTML DE EJEMPLO 🔽
    <html>
        <head>
        </head>
        <body>
            <input type="text" id="name" class="form">
        </body>
    </html>

-> SELECTORES XPATH (ALGUNOS EJEMPLOS) 🔽
    ▶️ //input[@type='text']
    ▶️ //input[@id='name']
    ▶️ //input[@class='form']

-> XPATH => RELATIVE vs ABSOLUTE XPATH
    ▶️ Absolute path: /html/head/body/div/input
    ▶️ Relative path: //input




🔵🟢---------------- LOCALIZAR ELEMENTOS CON CSS SELECTOR ---------------- 🔵🟢

-> CSS Selectors
    ▶️ input[type="text"]
    ▶️ input[id="name"]
    ▶️ input[class="form"]

-> Shortcuts (una forma de acortar los css selector => input[id="name"] == input#name )
    ▶️ input.form (by class)
    ▶️ input#name (by id)




🔵🟢---------------- FUNCIONES XPATH (MÁS LEGIBLE ✏️) ---------------- 🔵🟢

-> 🟡getByPlaceholder: <input type="email" placeholder="name@example.com">
    ▶️ Element type: input
    ▶️ Properties: placeholder
    ▶️ Value: name@example.com

-> 🟡getByAltText: <img alt='Playwright logo'>
    ▶️ Element type: img
    ▶️ Properties: alt
    ▶️ Value: Playwright logo

-> 🟡getByRole: 🔽

        <h3>Sign up</h3>
        <label>
            <input type="checkbox" /> Subscribe
        </label>
        <br/>
        <button>Submit</button>




🔵🟢---------------- ACTUALIZAR VERSIÓN PLAYWRIGHT ⏮️ ---------------- 🔵🟢

➡️ Si nos vamos al archivo de '/package.json', hay una linea que nos dice la versión de playwright con la que estamos trabajando -> (("@playwright/test": "^1.42.1")), en este caso la 1.42.1. 

➡️ Como es lógico, todas las herramientas tienes actualizaciones donde incluyen mejoras, nuevas funcionalidades, etc. En nuestro caso, para saber si hay alguna version mas nueva de la que tenemos, abrimos una nueva terminal (Ctrl+Mayús+Ñ) y escribimos el comando 'npm outdated @playwright/test'. La columna de 'Current' es la que tenemos y la columna de 'Wanted' es la que queremos, es decir, la ultima que ha salido.

➡️ Para conseguir dicha version, ejecutamos en la terminal el comando 'npm install -D @playwright/test@latest'. Una vez instalada la última version de Playwright, necesitamos también actualizar la versión de los navegadores para que sean compatibles con la última versión de Playwright. Para ello ejecutamos el comando 'npx playwright install' en la terminal y podemos ver como esta instalando uno por uno la nueva version de los navegadores




🔵🟢---------------- EJECUTAR TESTS EN MÚLTIPLES ENV. ---------------- 🔵🟢

➡️ Vamos a ver como configurar nuestro 'Playwright' para ejecutar tests en diferentes ambientes (qa, dev, prod, etc), donde cada ambiente tiene una url diferente, unos datos diferentes, etc

➡️ Para implementar esta nueva característica, abrimos una nueva terminar (Ctrl+Mayús+Ñ) y ejecutamos el comando 'npm i dotenv --save-dev'. Para comprobar que se ha instalado, podemos ir al archivo 'package.json' en la raíz de nuestro proyecto, y debería de aparecer una línea tal que así -> "dotenv": "^16.4.5" (con vuestra respectiva versión)

➡️ Una vez descargado, vamos a ver como podemos poner en uso esta nueva herramienta. Para ello, primeramente, vamos a crear una carpeta en la raiz de nuestro proyecto que se va a llamar 'env'. Basicamente lo que vamos a guardar en esta carpeta son los diferentes 'environments' con los que vamos a trabajar, para poder guardar variables de cada uno de los environments. 
    
    En mi caso, en la carpeta 'env', voy a crear los archivos '.env.prod' (producción), '.env.qa
(testing) y '.env.dev' (desarrollo). En cada uno de estos archivos voy a guardar variables especificas de cada uno.

    En mi caso, en 'dev' voy a guardar la variable -> ((URL='https://dev.saucedemo.com/')), en 'qa' -> 
((URL='https://qa.saucedemo.com/')) y en 'prod' -> ((URL='https://prod.saucedemo.com/')). Ahora solamente nos queda saber como poner en uso esta variables en nuestros scripts.

➡️ Una vez definidas todas nuestras variables para cada uno de nuestros entornos, vamos a indicarle a playwright de que entorno quiero que coja las variables. Para ello nos dirigimos al archivo 'playwright.config.ts' (se encuentra en la raiz de nuestro proyecto) y donde pone -> // require('dotenv').config(); , tenemos que descomentar esa linea y dentro de los parentesis del 'config' poner esto -> 
{ path: `.env.dev` }. De este modo cogera las variables del entorno que le indiquemos en el parametro de 'path'




🔵🟢---------------- COMO HACER CAPTURAS DE PANTALLA ---------------- 🔵🟢

- En algún momento de la ejecución del test, seguramente necesitemos saber algun estado especifico de algun boton, desplegable o de la pagina misma. Para ello es muy útil hacer capturas de pantalla

- En este caso, Playwright, nos ofrece una función para poder todas las capturas que queramos en el proceso de testeo

- Para ello, en cualquier test y en cualquier momento, vamos a poner la siguiente funcion ->

    ➡️ await page.screenshot({path: })

- En el path, debemos de poner la ruta de la carpeta donde vamos a guardas dichas capturas para poder checkearlas en un futuro

- En nuestro caso para probarlo, vamos a poner esto:

    ➡️ await page.screenshot({path: 'screenshot/login.png' })

- Esto quiere decir que la foto se guardará con el nombre de 'login.png' y se alamcenará en la carpeta 'screenshot'

- Podemos pasarle un parametro más a la funcion 'screenshot' (opcional), que es fullPage: true, para así poder hacer una captura a la página entera (si no se lo ponemos, solo hara a lo que este visible, si tiene scroll o mas contenido debajo no aparecerá en la captura) -> 

    ➡️ await page.screenshot({path: 'screenshot/login.png', fullPage: true })




🔵🟢---------------- EJECUTAR TEST POR CONSOLA ---------------- 🔵🟢

➡️ Hasta ahora, ejecutar los test ha sido tarea fácil gracias a la extesion de Playwright que nos descargamos al principio, pero... ¿y si queremos ejecutar los test en la terminal para tener un poco mas de control y ser mas detallados a la hora de ejecutarlos?

➡️ Para ello, lo primero, abrimos la terminal con Ctrl+Ñ, y a continuación ponemos 'npx playwright test'. Este comando ejecutara todos los tests que esten en la carpeta 'test'

➡️ Si queremos ejecutar solamente un test en especifico, ejecutamos los mismo de antes pero pasandole al final la ruta del test que queremos ejecutar